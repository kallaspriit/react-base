@import "~normalize-scss/sass/normalize/import-now"; // https://github.com/JohnAlbin/normalize-scss
@import "~include-media/dist/_include-media"; // http://include-media.com/

/*
// https://github.com/modularscale/modularscale-sass
@import '~modularscale-sass/stylesheets/modularscale';

$modularscale: (
  base: 1em,
  ratio: 1.5
);
*/

// define include-media breakpoints
$breakpoints: (phone: 320px, tablet: 768px, desktop: 1024px);

// content colors
$color-primary:     rgba(21, 21, 21, 1);
$color-inverted:    invert($color-primary);
$color-secondary:   rgba(166, 61, 64, 1);
$color-tertiary:    rgba(233, 184, 114, 1);
$color-quaternary:  rgba(144, 169, 89, 1);
$color-quinary:     rgba(100, 148, 170, 1);
$color-transparent: rgba(0, 0, 0, 0);

// testing colors
$color1:  #1ABC9C;
$color2:  #3498DB;
$color3:  #9B59B6;
$color4:  #34495E;
$color5:  #F1C40F;
$color6:  #E67E22;
$color7:  #E74C3C;
$color8:  #BDC3C7;
$color9:  #2ECC71;
$color10: #16A085;

// https://www.paulirish.com/2012/box-sizing-border-box-ftw/
html {
    box-sizing: border-box;
    font-size: 1em;
    line-height: 1.5;
}
*,
*:before,
*:after {
    box-sizing: inherit;
}

body {
    font-family: 'Roboto', sans-serif;
    color: $color-primary;
}

// clearfix - https://css-tricks.com/snippets/css/clear-fix/
.group:after {
  content: "";
  display: table;
  clear: both;
}

// block identifier helper
.label {
    color: $color-inverted;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1rem;
    overflow: hidden;
    min-height: 5rem;
    font-size: 130%;
    font-family: monospace;
}

.id {
    @extend .label;

    color: $color-inverted;
    background: linear-gradient(to bottom, $color-quaternary, darken($color-quaternary, 20%));
    border-radius: 10px;
}

@mixin grid($size, $color, $width) {
    background-size: $size $size;
    background-image: linear-gradient(to right, $color $width, transparent $width), linear-gradient(to bottom, $color $width, transparent $width);
}

.grid {
    position: relative;

    &:hover {
        &:before,
        &:after {
            content: "";
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 100%;
        }

        &:before {
            @include grid(5rem, rgba(0, 0, 0, 0.1), 2px);
        }

        &:after {
            @include grid(1rem, rgba(0, 0, 0, 0.1), 1px);
        }
    }
}

.experiment {
    position: relative;
    margin-bottom: 5rem;
    background-color: rgba(0, 0, 0, 0.2);

    // remove bottom margin from the last experiment
    &:last-of-type {
        margin-bottom: 0;
    }

    @extend .grid;

    &__title {
        margin: 0;
        padding: 0 1rem;
        line-height: 5rem;
        background-color: $color-primary;
        color: $color-inverted;
        font-family: 'Lato', sans-serif;
        font-weight: 100;
        font-size: 3rem;
    }

    &__contents {
        padding: 2rem;
    }

    &__gradients {

        .gradient {
            @extend .label;

            color: $color-inverted;
            width: 10vw;
            height: 10vw;
            margin: 1rem 0rem 1rem 1rem;
            float: left;

            &__top-to-bottom {
                background-image: linear-gradient(to bottom, $color-secondary, $color-tertiary);
            }

            &__angle-smooth {
                background-image: linear-gradient(45deg, $color-secondary, $color-tertiary);
            }

            &__angle-hard {
                background-image: linear-gradient(45deg, $color-secondary 75%, $color-tertiary 75%);
            }

            &__multicolor-smooth {
                background-image: linear-gradient(to right, $color-primary, $color-secondary, $color-tertiary, $color-quaternary, $color-quinary);
            }

            &__multicolor-hard {
                background-image: linear-gradient(to right, $color-primary 20%, $color-secondary 20%, $color-secondary 40%, $color-tertiary 40%, $color-tertiary 60%, $color-quaternary 60%, $color-quaternary 80%, $color-quinary 80%, $color-quinary 100%);
            }

            &__radial-smooth {
                background-image: radial-gradient($color-primary, $color-secondary);
            }

            &__radial-multicolor {
                background-image: radial-gradient($color-primary, $color-secondary, $color-tertiary);
            }

            &__radial-hard {
                background-image: radial-gradient($color-tertiary 50%, $color-secondary 50%);
            }

            &__radial-background {
                background-image: radial-gradient($color-transparent 50%, $color-secondary 50%), url("http://lorempixel.com/400/300/nature/1");
            }

            &__radial-ellipse {
                background-image: radial-gradient(ellipse farthest-corner at 0px 0px, $color-secondary 25%, $color-tertiary 75%);
            }
        }
    }

    &__backgrounds {

        .background {
            @extend .label;

            color: $color-inverted;
            background-color: $color-secondary;
            width: 400px;
            height: 300px;
            padding: 2rem;
            margin: 1rem 0rem 1rem 1rem;
            border: 1rem dashed rgba(0, 0, 0, 0.25);
            float: left;

            &__default {
                background-image: url("http://lorempixel.com/200/150/nature/1");
            }

            &__no-repeat {
                background-image: url("http://lorempixel.com/200/150/nature/1");
                background-repeat: no-repeat;
            }

            &__repeat-x {
                background-image: url("http://lorempixel.com/200/150/nature/1");
                background-repeat: repeat-x;
            }

            &__repeat-y {
                background-image: url("http://lorempixel.com/200/150/nature/1");
                background-repeat: repeat-y;
            }

            &__position-px {
                background-image: url("http://lorempixel.com/200/150/nature/1");
                background-repeat: no-repeat;
                background-position: 1em 2em;
            }

            &__cover {
                background-image: url("http://lorempixel.com/600/150/nature/1");
                background-repeat: no-repeat;
                background-size: cover;
            }

            &__contain {
                background-image: url("http://lorempixel.com/600/150/nature/1");
                background-repeat: no-repeat;
                background-size: contain;
            }

            &__clip-border {
                background-image: url("http://lorempixel.com/400/300/nature/1");
                background-repeat: no-repeat;
                background-clip: border-box;
            }

            &__clip-border-origin {
                background-image: url("http://lorempixel.com/400/300/nature/1");
                background-repeat: no-repeat;
                background-clip: border-box;
                background-origin: border-box;
            }

            &__clip-padding {
                background-image: url("http://lorempixel.com/400/300/nature/1");
                background-repeat: no-repeat;
                background-clip: padding-box;
            }

            &__clip-content {
                background-image: url("http://lorempixel.com/400/300/nature/1");
                background-repeat: no-repeat;
                background-clip: content-box;
            }

            &__multiple {
                background:
                    url("http://lorempixel.com/200/150/nature/1") 0 0 no-repeat border-box,
                    url("http://lorempixel.com/200/150/nature/2") 100% 0 no-repeat  border-box,
                    url("http://lorempixel.com/200/150/nature/3") 0 100% no-repeat  border-box,
                    url("http://lorempixel.com/200/150/nature/4") 100% 100% no-repeat  border-box;
            }
        }
    }

    &__flexbox-playground {

        .container {
            // visual
            background-color: $color-secondary;
            min-height: 100vh;

            // flex - block, insline-flex - inline
            display: flex;
            // display: inline-flex;

            // main axis direction
            // flex-direction: row; // default left to right, cross axis is from top to bottom
            // flex-direction: row-reverse;
            // flex-direction: column;
            // flex-direction: column-reverse;

            // how to wrap items that do not fit on the main axis
            // flex-wrap: nowrap; // default
            // flex-wrap: wrap;
            // flex-wrap: wrap-reverse;

            // align on main axis
            // justify-content: flex-start; // default, start of flex container
            // justify-content: flex-end; // end of flex container
            // justify-content: center; // center of flex container
            // justify-content: space-between; // divide free space between items
            // justify-content: space-around; // divide free space between items, include start and end

            // align on cross axis
            // align-items: stretch; // default, stretches to use available space on cross axis
            // align-items: center; // centered on cross axis
            // align-items: flex-start; // start of cross axis
            // align-items: flex-end; // end of cross axis
            // align-items: baseline; // keep baseline of text aligned

            // what to do with extra space on the cross axis
            // flex-wrap: wrap;
            // align-content: stretch; // default, divide the available space between all items
            // align-content: flex-start; // start at start of cross axis
            // align-content: flex-end; // start at end of cross axis
            // align-content: center; // start at end of cross axis
            // align-content: space-between; // divide free space between items
            // align-content: space-around; // divide free space between items, include start and end

            // responsive navigation test
            // display: flex;
            // min-height: inherit;
            // min-height: 5rem;
            // .item {
            //     flex: 1;
            //
            //     // make the last 4 smaller
            //     &:nth-child(n+7) {
            //         flex-grow: 0.5;
            //     }
            // }
            // @media all and (max-width: 1000px) {
            //     flex-wrap: wrap;
            //
            //     .item {
            //         flex-basis: 50%;
            //
            //         &:nth-child(n+7) {
            //             flex-basis: 25%;
            //         }
            //     }
            // }
            // @media all and (max-width: 500px) {
            //     flex-wrap: wrap;
            //
            //     .item {
            //         flex-basis: 100%;
            //     }
            // }
        }

        .item {
            @extend .label;

            color: $color-inverted;

            &__1 { background-color: $color1; }
            &__2 { background-color: $color2; }
            &__3 { background-color: $color3; }
            &__4 { background-color: $color4; }
            &__5 { background-color: $color5; }
            &__6 { background-color: $color6; }
            &__7 { background-color: $color7; }
            &__8 { background-color: $color8; }
            &__9 { background-color: $color9; }
            &__10 { background-color: $color10; }

            // three items per row
            // width: 33.33%;

            // three items per row with margin
            // width: calc(33.33% - 4em);
            // margin: 2em;

            // what to do with extra or missing space (grow, shrink)
            flex: 1;

            // reorder items (negative works as well)
            // &__2 { order: 2; }
            // &__3 { order: 3; }

            // testing align-content
            // width: 25%;

            // test varying heights
            // &__2 { padding-bottom: 3em; }
            // &__5 { padding-bottom: 5em; }
            // &__9 { padding-bottom: 2em; }

            // test changing align of specific items
            // &__3 {
            //     align-self: stretch;
            // }

            // test controlling grow/shrink of items
            // flex: 1; // flex-grow: 1; flex-shrink: 1; flex-basis:
            // flex-grow: 1; // defaults to 0 - dont use the extra space
            // flex-shrink: 1;

            // try to give second box more space
            // &__2 {
            //     flex: 2;
            // }

            // provide ideal size in main axis for all and a specific item
            // flex-basis: 5rem;
            // flex: 0 1 5rem;
            // &__2 {
            //     // flex-basis: 10rem;
            //     flex: 0 1 10rem;
            // }
            // &__10 {
            //     flex-grow: 1;
            // }

            // make the normal item size 5rem and give all the extra room to the last item
            // flex: 0 1 5rem;
            // &:last-of-type {
            //     flex-grow: 1;
            // }
        }
    }

    &__responsive {

        .responsive-wrapper {
            @extend .label;

            height: 100vh;
            color: $color-inverted;
            background: linear-gradient(to bottom, $color1, darken($color1, 20%));

            &:after {
                content: "desktop";
            }

            @include media(">=tablet", "<desktop", "portrait") {
                background: linear-gradient(to bottom, $color2, darken($color2, 20%));

                &:after {
                    content: "tablet portrait";
                }
            }

            @include media(">=tablet", "<desktop", "landscape") {
                background: linear-gradient(to bottom, $color3, darken($color3, 20%));

                &:after {
                    content: "tablet landscape";
                }
            }

            @include media(">=phone", "<tablet", "portrait") {
                background: linear-gradient(to bottom, $color4, darken($color4, 20%));

                &:after {
                    content: "phone portrait";
                }
            }

            @include media("<tablet", "landscape") {
                background: linear-gradient(to bottom, $color5, darken($color5, 20%));

                &:after {
                    content: "phone landscape";
                }
            }
        }
    }

    &__animations {

        // flex container
        .animation {
            display: flex;
            flex-flow: row wrap;
            text-align: center;

            // flex items
            > * {
                // make the items flex container as well to center text both horizontally and vertically


                // make the items grow and occupy 25% of the room if possible
                flex: 1 1 25%;

                // make the items square (padding percentage is relative to width)
                &:before {
                    content: "";
                    float: left;
                    padding-bottom: 100%;
                }
            }

            &__1 {
                @extend .label;

                animation: background-color-animation 2s alternate infinite;
            }

            &__2 {
                // center the animated div inside
                display: flex;
                justify-content: center;
                align-items: center;

                > div {
                    @extend .label;

                    background-color: $color1;

                    width: 50%;
                    height: 50%;

                    // animation: size-animation 2s ease-in-out 0s alternate infinite none running;
                    animation-name: size-animation;
                    animation-duration: 2s;
                    animation-timing-function: ease-in-out;
                    animation-delay: 0;
                    animation-direction: alternate;
                    animation-iteration-count: infinite;
                    animation-fill-mode: none;
                    animation-play-state: running;
                }
            }

            &__3 {
                // center the animated div inside
                display: flex;
                justify-content: center;
                align-items: center;

                > div {
                    @extend .label;

                    background-color: $color2;

                    width: 50%;
                    height: 50%;

                    animation: scale-animation 2s ease-in-out 0s alternate infinite;
                }
            }

            &__4 {
                // center the animated div inside
                display: flex;
                justify-content: center;
                align-items: center;

                > div {
                    @extend .label;

                    background-color: $color3;

                    width: 50%;
                    height: 50%;

                    animation:
                        rotation-animation 2s ease-in-out 3s alternate infinite both,
                        background-color-animation 2s alternate infinite;
                }
            }

            @keyframes background-color-animation {
                0% {
                    background-color: #000;
                    color: #FFF;
                }
                100% {
                    background-color: #FFF;
                    color: #000;
                }
            }

            @keyframes size-animation {
                0% {
                    width: 50%;
                    height: 50%;
                }
                100% {
                    width: 100%;
                    height: 100%;
                }
            }

            @keyframes scale-animation {
                0% {
                    transform: scale(1.0);
                }
                100% {
                    transform: scale(2.0);
                }
            }

            @keyframes rotation-animation {
                0% {
                    transform: rotate(-45deg);
                }
                100% {
                    transform: rotate(45deg);
                }
            }
        }

    }

    &__float-layout {
        $vertical-margin: 2rem;
        $horizontal-margin: 2%;
        $content-width: 80%;

        .layout {
            padding: $vertical-margin;

            &__header,
            &__content,
            &__sidebar {
                margin-bottom: $vertical-margin;
            }

            &__content {
                float: left;
                width: $content-width;
            }

            &__sidebar {
                float: left;
                width: 100% - $content-width - $horizontal-margin;
                margin-left: $horizontal-margin;
            }

            &__footer {
                clear: both;
            }
        }
    }

    &__flexbox-layout {
        $margin: 2rem;
        $sidebar-width: 20rem;

        .layout {
            // use flex layout in row direction and wrap items
            display: flex;
            flex-flow: row wrap;

            // add half-margin padding, the rest comes from the elements themselves
            padding: $margin / 2;

            // target immediate children - the flex items
            > * {
                padding: $margin / 2;
            }

            // make the header and footer use up the entire width
            &__header,
            &__footer {
                flex-basis: 100%;
            }

            // make the content 4 times bigger than the sidebar
            &__content {
                flex: 4;
            }
            &__sidebar {
                flex: 1; // just set the ratio
                // flex: 1 4 ($sidebar-width + $margin); // use preferred width
            }
        }
    }

    &__grid-layout {

        $gap: 2rem;

        .layout {
            padding: $gap;

            // use grid display mode
            display: grid;            // block-level grid
            // display: inline-grid;     // inline-level grid
            // display: subgrid;         // if your grid container is itself a grid item (i.e. nested grids), you can use this property to indicate that you want the sizes of its rows/columns to be taken from its parent rather than specifying its own.

            // set column and row templates to use
            grid-template-columns: [left] 4fr [right] 1fr;
            grid-template-rows: [top] 5rem [middle] 1fr [bottom] 5rem;

            grid-template-areas:
                "header header"
                "content sidebar"
                "footer footer";

            // set column and row gaps
            // grid-column-gap: $gap;
            // grid-row-gap: $gap;
            grid-gap: $gap;

            // grid items (immediate children)
            > * {

            }

            &__header {
                grid-area: header;
            }

            &__content {
                grid-area: content;
            }

            &__sidebar {
                grid-area: sidebar;
            }

            &__footer {
                grid-area: footer;
            }
        }

    }

}
